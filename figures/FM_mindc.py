import cPickle, base64
try:
	from SimpleSession.versions.v64 import beginRestore,\
	    registerAfterModelsCB, reportRestoreError, checkVersion
except ImportError:
	from chimera import UserError
	raise UserError('Cannot open session that was saved in a'
	    ' newer version of Chimera; update your version')
checkVersion([1, 11, 41179])
import chimera
from chimera import replyobj
replyobj.status('Restoring session...', \
    blankAfter=0)
replyobj.status('Beginning session restore...', \
    blankAfter=0, secondary=True)
beginRestore()

def restoreCoreModels():
	from SimpleSession.versions.v64 import init, restoreViewer, \
	     restoreMolecules, restoreColors, restoreSurfaces, \
	     restoreVRML, restorePseudoBondGroups, restoreModelAssociations
	molInfo = cPickle.loads(base64.b64decode('gAJ9cQEoVRFyaWJib25JbnNpZGVDb2xvcnECSwFOfYdVCWJhbGxTY2FsZXEDSwFHP9AAAAAAAAB9h1UJcG9pbnRTaXplcQRLAUc/8AAAAAAAAH2HVQVjb2xvcnEFSwFLAH2HVQpyaWJib25UeXBlcQZLAUsAfYdVCnN0aWNrU2NhbGVxB0sBRz/wAAAAAAAAfYdVDGFyb21hdGljTW9kZXEISwFLAX2HVQp2ZHdEZW5zaXR5cQlLAUdAFAAAAAAAAH2HVQZoaWRkZW5xCksBiX2HVQ1hcm9tYXRpY0NvbG9ycQtLAU59h1UPcmliYm9uU21vb3RoaW5ncQxLAUsAfYdVCWF1dG9jaGFpbnENSwGIfYdVCnBkYlZlcnNpb25xDksBSwJ9h1UIb3B0aW9uYWxxD31xEFUIb3BlbmVkQXNxEYiJSwEoWEcAAAAvVXNlcnMvY2FybG9zZ29uemFsZXpvbGl2ZXIvTWFzdGVycy9Wb2dlbC1NRC1BbmFseXNpcy9EYXRhL0ZNX21pbmRjLnBkYlUDUERCTol0cRJ9h4dzVQ9sb3dlckNhc2VDaGFpbnNxE0sBiX2HVQlsaW5lV2lkdGhxFEsBRz/wAAAAAAAAfYdVD3Jlc2lkdWVMYWJlbFBvc3EVSwFLAH2HVQRuYW1lcRZLAVgMAAAARk1fbWluZGMucGRifYdVD2Fyb21hdGljRGlzcGxheXEXSwGJfYdVD3JpYmJvblN0aWZmbmVzc3EYSwFHP+mZmZmZmZp9h1UKcGRiSGVhZGVyc3EZXXEafXEbYVUDaWRzcRxLAUsASwCGfYdVDnN1cmZhY2VPcGFjaXR5cR1LAUe/8AAAAAAAAH2HVRBhcm9tYXRpY0xpbmVUeXBlcR5LAUsCfYdVFHJpYmJvbkhpZGVzTWFpbmNoYWlucR9LAYh9h1UHZGlzcGxheXEgSwGIfYd1Lg=='))
	resInfo = cPickle.loads(base64.b64decode('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'))
	atomInfo = cPickle.loads(base64.b64decode(''))
	bondInfo = cPickle.loads(base64.b64decode('gAJ9cQEoVQVjb2xvcnECTQ0BTn2HVQVhdG9tc3EDXXEEKF1xBShLKEspZV1xBihLKUssZV1xByhLKUsuZV1xCChLKUsqZV1xCShLKksrZV1xCihLLUsoZV1xCyhLL0swZV1xDChLMEsxZV1xDShLMEszZV1xDihLMEs1ZV1xDyhLMUsyZV1xEChLNEsvZV1xEShLKksvZV1xEihLNks3ZV1xEyhLN0s4ZV1xFChLN0s8ZV1xFShLN0s6ZV1xFihLOEs5ZV1xFyhLO0s2ZV1xGChLMUs2ZV1xGShLPUs+ZV1xGihLPktDZV1xGyhLPks/ZV1xHChLP0tAZV1xHShLQks9ZV1xHihLOEs9ZV1xHyhLREtFZV1xIChLRUtKZV1xIShLRUtIZV1xIihLRUtGZV1xIyhLRktHZV1xJChLSUtEZV1xJShLP0tEZV1xJihLS0tMZV1xJyhLTEtRZV1xKChLTEtPZV1xKShLTEtNZV1xKihLTUtOZV1xKyhLUEtLZV1xLChLRktLZV1xLShLUktTZV1xLihLU0tYZV1xLyhLU0tWZV1xMChLU0tUZV1xMShLVEtVZV1xMihLV0tSZV1xMyhLTUtSZV1xNChLWUtaZV1xNShLWktfZV1xNihLWktdZV1xNyhLWktbZV1xOChLW0tcZV1xOShLXktZZV1xOihLVEtZZV1xOyhLYEthZV1xPChLYUtmZV1xPShLYUtkZV1xPihLYUtiZV1xPyhLYktjZV1xQChLZUtgZV1xQShLW0tgZV1xQihLZ0toZV1xQyhLaEttZV1xRChLaEtrZV1xRShLaEtpZV1xRihLaUtqZV1xRyhLbEtnZV1xSChLYktnZV1xSShLbktvZV1xSihLb0t0ZV1xSyhLb0tyZV1xTChLb0twZV1xTShLcEtxZV1xTihLc0tuZV1xTyhLaUtuZV1xUChLdUt2ZV1xUShLdkt3ZV1xUihLdkt5ZV1xUyhLdkt7ZV1xVChLd0t4ZV1xVShLekt1ZV1xVihLcEt1ZV1xVyhLfEt9ZV1xWChLfUuCZV1xWShLfUuAZV1xWihLfUt+ZV1xWyhLfkt/ZV1xXChLgUt8ZV1xXShLd0t8ZV1xXihLg0uEZV1xXyhLhEuJZV1xYChLhEuHZV1xYShLhEuFZV1xYihLhUuGZV1xYyhLiEuDZV1xZChLfkuDZV1xZShLikuLZV1xZihLi0uQZV1xZyhLi0uOZV1xaChLi0uMZV1xaShLjEuNZV1xaihLj0uKZV1xayhLhUuKZV1xbChLkUuSZV1xbShLkkuTZV1xbihLkkuVZV1xbyhLkkuXZV1xcChLk0uUZV1xcShLlkuRZV1xcihLjEuRZV1xcyhLmEuZZV1xdChLmUueZV1xdShLmUucZV1xdihLmUuaZV1xdyhLmkubZV1xeChLnUuYZV1xeShLk0uYZV1xeihLn0ugZV1xeyhLoEulZV1xfChLoEujZV1xfShLoEuhZV1xfihLoUuiZV1xfyhLpEufZV1xgChLmkufZV1xgShLpkunZV1xgihLp0usZV1xgyhLp0uqZV1xhChLp0uoZV1xhShLqEupZV1xhihLq0umZV1xhyhLoUumZV1xiChLrUuuZV1xiShLrkuzZV1xiihLrkuxZV1xiyhLrkuvZV1xjChLr0uwZV1xjShLskutZV1xjihLqEutZV1xjyhLtEu1ZV1xkChLtUu6ZV1xkShLtUu4ZV1xkihLtUu2ZV1xkyhLtku3ZV1xlChLuUu0ZV1xlShLr0u0ZV1xlihLu0u8ZV1xlyhLvEvBZV1xmChLvEu/ZV1xmShLvEu9ZV1xmihLvUu+ZV1xmyhLwEu7ZV1xnChLtku7ZV1xnShLwkvDZV1xnihLw0vIZV1xnyhLw0vGZV1xoChLw0vEZV1xoShLxEvFZV1xoihLx0vCZV1xoyhLvUvCZV1xpChLyUvKZV1xpShLykvPZV1xpihLykvLZV1xpyhLy0vMZV1xqChLzkvJZV1xqShLxEvJZV1xqihL0EvRZV1xqyhL0UvWZV1xrChL0UvUZV1xrShL0UvSZV1xrihL0kvTZV1xryhL1UvQZV1xsChLy0vQZV1xsShL10vYZV1xsihL2EvZZV1xsyhL2EvbZV1xtChL2EvdZV1xtShL2UvaZV1xtihL3EvXZV1xtyhL0kvXZV1xuChL3kvfZV1xuShL30vkZV1xuihL30viZV1xuyhL30vgZV1xvChL4EvhZV1xvShL40veZV1xvihL2UveZV1xvyhL5UvmZV1xwChL5kvrZV1xwShL5kvpZV1xwihL5kvnZV1xwyhL50voZV1xxChL6kvlZV1xxShL4EvlZV1xxihL7EvtZV1xxyhL7UvyZV1xyChL7UvwZV1xyShL7UvuZV1xyihL7kvvZV1xyyhL8UvsZV1xzChL50vsZV1xzShL80v0ZV1xzihL9Ev1ZV1xzyhL9Ev3ZV1x0ChL9Ev5ZV1x0ShL9Uv2ZV1x0ihL+EvzZV1x0yhL7kvzZV1x1ChL+kv7ZV1x1ShL+00AAWVdcdYoS/tL/mVdcdcoS/tL/GVdcdgoS/xL/WVdcdkoS/9L+mVdcdooS/VL+mVdcdsoTQEBTQIBZV1x3ChNAgFNBwFlXXHdKE0CAU0FAWVdcd4oTQIBTQMBZV1x3yhNAwFNBAFlXXHgKE0GAU0BAWVdceEoS/xNAQFlXXHiKE0IAU0JAWVdceMoTQkBTQ4BZV1x5ChNCQFNDAFlXXHlKE0JAU0KAWVdceYoTQoBTQsBZV1x5yhNDQFNCAFlXXHoKE0DAU0IAWVdcekoTQ8BTRABZV1x6ihNEAFNFQFlXXHrKE0QAU0RAWVdcewoTREBTRIBZV1x7ShNFAFNDwFlXXHuKE0KAU0PAWVdce8oTRYBTRcBZV1x8ChNFwFNHAFlXXHxKE0XAU0aAWVdcfIoTRcBTRgBZV1x8yhNGAFNGQFlXXH0KE0bAU0WAWVdcfUoTREBTRYBZV1x9ihNHQFNHgFlXXH3KE0eAU0jAWVdcfgoTR4BTSEBZV1x+ShNHgFNHwFlXXH6KE0fAU0gAWVdcfsoTSIBTR0BZV1x/ChNGAFNHQFlXXH9KE0kAU0lAWVdcf4oTSUBTSoBZV1x/yhNJQFNKAFlXXIAAQAAKE0lAU0mAWVdcgEBAAAoTSYBTScBZV1yAgEAAChNKQFNJAFlXXIDAQAAKE0fAU0kAWVdcgQBAAAoTSsBTSwBZV1yBQEAAChNLAFNLQFlXXIGAQAAKE0sAU0vAWVdcgcBAAAoTSwBTTEBZV1yCAEAAChNLQFNLgFlXXIJAQAAKE0wAU0rAWVdcgoBAAAoTSYBTSsBZV1yCwEAAChNMgFNMwFlXXIMAQAAKE0zAU04AWVdcg0BAAAoTTMBTTcBZV1yDgEAAChNMwFNNAFlXXIPAQAAKE00AU01AWVdchABAAAoTTYBTTIBZV1yEQEAAChNLQFNMgFlZVUFbGFiZWxyEgEAAE0NAVgAAAAAfYdVCGhhbGZib25kchMBAABNDQGIfYdVBnJhZGl1c3IUAQAATQ0BRz/JmZmgAAAAfYdVC2xhYmVsT2Zmc2V0chUBAABNDQFOfYdVCGRyYXdNb2RlchYBAABNDQFLAX2HVQhvcHRpb25hbHIXAQAAfVUHZGlzcGxheXIYAQAATQ0BSwJ9h3Uu'))
	crdInfo = cPickle.loads(base64.b64decode(''))
	surfInfo = {'category': (1, u'main', {}), 'probeRadius': (1, 1.4, {}), 'pointSize': (1, 1, {}), 'name': [u'MSMS main surface of FM_mindc.pdb'], 'density': (1, 2, {}), 'colorMode': (1, 1, {}), 'useLighting': (1, True, {}), 'transparencyBlendMode': (1, 1, {}), 'molecule': [0], 'smoothLines': (1, False, {}), 'lineWidth': (1, 1, {}), 'allComponents': (1, True, {}), 'twoSidedLighting': (1, True, {}), 'customVisibility': [None], 'drawMode': (1, 0, {}), 'display': (1, True, {}), 'customColors': [(0, None, {})]}
	vrmlInfo = {'subid': (0, None, {}), 'display': (0, None, {}), 'id': (0, None, {}), 'vrmlString': [], 'name': (0, None, {})}
	colors = {'Ru': ((0.141176, 0.560784, 0.560784), 1, u'default'), 'Re': ((0.14902, 0.490196, 0.670588), 1, u'default'), 'Rf': ((0.8, 0, 0.34902), 1, u'default'), 'Ra': ((0, 0.490196, 0), 1, u'default'), 'Rb': ((0.439216, 0.180392, 0.690196), 1, u'default'), 'Rn': ((0.258824, 0.509804, 0.588235), 1, u'default'), 'Rh': ((0.0392157, 0.490196, 0.54902), 1, u'default'), 'Be': ((0.760784, 1, 0), 1, u'default'), 'Ba': ((0, 0.788235, 0), 1, u'default'), 'Bh': ((0.878431, 0, 0.219608), 1, u'default'), 'Bi': ((0.619608, 0.309804, 0.709804), 1, u'default'), 'Bk': ((0.541176, 0.309804, 0.890196), 1, u'default'), 'Br': ((0.65098, 0.160784, 0.160784), 1, u'default'), 'H': ((1, 1, 1), 1, u'default'), 'P': ((1, 0.501961, 0), 1, u'default'), 'Os': ((0.14902, 0.4, 0.588235), 1, u'default'), 'Ge': ((0.4, 0.560784, 0.560784), 1, u'default'), 'Gd': ((0.270588, 1, 0.780392), 1, u'default'), 'Ga': ((0.760784, 0.560784, 0.560784), 1, u'default'), 'Pr': ((0.85098, 1, 0.780392), 1, u'default'), 'Pt': ((0.815686, 0.815686, 0.878431), 1, u'default'), 'Pu': ((0, 0.419608, 1), 1, u'default'),
'C': ((0.564706, 0.564706, 0.564706), 1, u'default'), 'Pb': ((0.341176, 0.34902, 0.380392), 1, u'default'), 'Pa': ((0, 0.631373, 1), 1, u'default'), 'Pd': ((0, 0.411765, 0.521569), 1, u'default'), 'Cd': ((1, 0.85098, 0.560784), 1, u'default'), 'Po': ((0.670588, 0.360784, 0), 1, u'default'), 'Pm': ((0.639216, 1, 0.780392), 1, u'default'), 'Hs': ((0.901961, 0, 0.180392), 1, u'default'), 'Ho': ((0, 1, 0.611765), 1, u'default'), 'Hf': ((0.301961, 0.760784, 1), 1, u'default'), 'Hg': ((0.721569, 0.721569, 0.815686), 1, u'default'), 'He': ((0.85098, 1, 1), 1, u'default'), 'Md': ((0.701961, 0.0509804, 0.65098), 1, u'default'), 'Mg': ((0.541176, 1, 0), 1, u'default'), 'K': ((0.560784, 0.25098, 0.831373), 1, u'default'), 'Mn': ((0.611765, 0.478431, 0.780392), 1, u'default'), 'O': ((1, 0.0509804, 0.0509804), 1, u'default'), 'Mt': ((0.921569, 0, 0.14902), 1, u'default'), 'S': ((1, 1, 0.188235), 1, u'default'), 'W': ((0.129412, 0.580392, 0.839216), 1, u'default'), 'Zn': ((0.490196, 0.501961, 0.690196), 1, u'default'), 'Eu': ((0.380392, 1, 0.780392), 1, u'default'),
'Zr': ((0.580392, 0.878431, 0.878431), 1, u'default'), 'Er': ((0, 0.901961, 0.458824), 1, u'default'), 'Ni': ((0.313725, 0.815686, 0.313725), 1, u'default'), 'No': ((0.741176, 0.0509804, 0.529412), 1, u'default'), 'Na': ((0.670588, 0.360784, 0.94902), 1, u'default'), 'Nb': ((0.45098, 0.760784, 0.788235), 1, u'default'), 'Nd': ((0.780392, 1, 0.780392), 1, u'default'), 'Ne': ((0.701961, 0.890196, 0.960784), 1, u'default'), 'Np': ((0, 0.501961, 1), 1, u'default'), 'Fr': ((0.258824, 0, 0.4), 1, u'default'), 'Fe': ((0.878431, 0.4, 0.2), 1, u'default'), 'Fm': ((0.701961, 0.121569, 0.729412), 1, u'default'), 'B': ((1, 0.709804, 0.709804), 1, u'default'), 'F': ((0.564706, 0.878431, 0.313725), 1, u'default'), 'Sr': ((0, 1, 0), 1, u'default'), 'N': ((0.188235, 0.313725, 0.972549), 1, u'default'), 'Kr': ((0.360784, 0.721569, 0.819608), 1, u'default'), 'Si': ((0.941176, 0.784314, 0.627451), 1, u'default'), 'Sn': ((0.4, 0.501961, 0.501961), 1, u'default'), 'Sm': ((0.560784, 1, 0.780392), 1, u'default'), 'V': ((0.65098, 0.65098, 0.670588), 1, u'default'), 'Sc': ((0.901961, 0.901961, 0.901961), 1, u'default'),
'Sb': ((0.619608, 0.388235, 0.709804), 1, u'default'), 'Sg': ((0.85098, 0, 0.270588), 1, u'default'), 'Se': ((1, 0.631373, 0), 1, u'default'), 'Co': ((0.941176, 0.564706, 0.627451), 1, u'default'), 'Cm': ((0.470588, 0.360784, 0.890196), 1, u'default'), 'Cl': ((0.121569, 0.941176, 0.121569), 1, u'default'), 'Ca': ((0.239216, 1, 0), 1, u'default'), 'Cf': ((0.631373, 0.211765, 0.831373), 1, u'default'), 'Ce': ((1, 1, 0.780392), 1, u'default'), 'Xe': ((0.258824, 0.619608, 0.690196), 1, u'default'), 'Tm': ((0, 0.831373, 0.321569), 1, u'default'), 'Cs': ((0.341176, 0.0901961, 0.560784), 1, u'default'), 'Cr': ((0.541176, 0.6, 0.780392), 1, u'default'), 'Cu': ((0.784314, 0.501961, 0.2), 1, u'default'), 'La': ((0.439216, 0.831373, 1), 1, u'default'), 'Li': ((0.8, 0.501961, 1), 1, u'default'), 'Tl': ((0.65098, 0.329412, 0.301961), 1, u'default'), 'Lu': ((0, 0.670588, 0.141176), 1, u'default'), 'Lr': ((0.780392, 0, 0.4), 1, u'default'), 'Th': ((0, 0.729412, 1), 1, u'default'), 'Ti': ((0.74902, 0.760784, 0.780392), 1, u'default'), 'tan': ((0.823529, 0.705882, 0.54902), 1, u'default'),
'Te': ((0.831373, 0.478431, 0), 1, u'default'), 'Tb': ((0.188235, 1, 0.780392), 1, u'default'), 'Tc': ((0.231373, 0.619608, 0.619608), 1, u'default'), 'Ta': ((0.301961, 0.65098, 1), 1, u'default'), 'Yb': ((0, 0.74902, 0.219608), 1, u'default'), 'Db': ((0.819608, 0, 0.309804), 1, u'default'), 'Dy': ((0.121569, 1, 0.780392), 1, u'default'), 'At': ((0.458824, 0.309804, 0.270588), 1, u'default'), 'I': ((0.580392, 0, 0.580392), 1, u'default'), 'U': ((0, 0.560784, 1), 1, u'default'), 'Y': ((0.580392, 1, 1), 1, u'default'), 'Ac': ((0.439216, 0.670588, 0.980392), 1, u'default'), 'Ag': ((0.752941, 0.752941, 0.752941), 1, u'default'), 'Ir': ((0.0901961, 0.329412, 0.529412), 1, u'default'), 'Am': ((0.329412, 0.360784, 0.94902), 1, u'default'), 'Al': ((0.74902, 0.65098, 0.65098), 1, u'default'), 'As': ((0.741176, 0.501961, 0.890196), 1, u'default'), 'Ar': ((0.501961, 0.819608, 0.890196), 1, u'default'), 'Au': ((1, 0.819608, 0.137255), 1, u'default'), 'Es': ((0.701961, 0.121569, 0.831373), 1, u'default'), 'In': ((0.65098, 0.458824, 0.45098), 1, u'default'), 'Mo': ((0.329412, 0.709804, 0.709804), 1, u'default')}
	materials = {u'default': ((0.85, 0.85, 0.85), 30)}
	pbInfo = {'category': [u'distance monitor'], 'bondInfo': [{'color': (0, None, {}), 'atoms': [], 'label': (0, None, {}), 'halfbond': (0, None, {}), 'labelColor': (0, None, {}), 'labelOffset': (0, None, {}), 'drawMode': (0, None, {}), 'display': (0, None, {})}], 'lineType': (1, 2, {}), 'color': (1, 40, {}), 'optional': {'fixedLabels': (True, False, (1, False, {}))}, 'display': (1, True, {}), 'showStubBonds': (1, False, {}), 'lineWidth': (1, 1, {}), 'stickScale': (1, 1, {}), 'id': [-2]}
	modelAssociations = {}
	colorInfo = (42, (u'', (0, 0.316126, 1, 1)), {(u'', (0.315726, 1, 0, 1)): [23], (u'', (1, 0.105642, 0, 1)): [38], (u'tan', (0.823529, 0.705882, 0.54902, 1)): [0], (u'', (0, 1, 0.210484, 1)): [18], (u'', (0, 1, 0.105242, 1)): [19], (u'', (1, 0.947579, 0, 1)): [30], (u'', (1, 0.526611, 0, 1)): [34], (u'', (0, 1, 0.631453, 1)): [14], (u'', (0, 1, 0.315726, 1)): [17], (u'', (0.105242, 1, 0, 1)): [21], (u'', (1, 0.737095, 0, 1)): [32], (u'', (0, 0.421368, 1, 1)): [5], (u'', (0, 1, 0.947179, 1)): [11], (u'', (1, 0.316126, 0, 1)): [36], (u'yellow', (1, 1, 0, 1)): [40], (u'', (0, 1, 0.736695, 1)): [13], (u'', (1, 0.0004, 0, 1)): [39], (u'', (0, 0.105642, 1, 1)): [2], (u'', (0, 1, 0.841937, 1)): [12], (u'', (0.210484, 1, 0, 1)): [22], (u'', (0, 0.947579, 1, 1)): [10], (u'', (1, 0.631853, 0, 1)): [33], (u'', (0, 0.631853, 1, 1)): [7], (u'', (0.631453, 1, 0, 1)): [26], (u'', (0, 0.210884, 1, 1)): [3], (u'', (1, 0.842337, 0, 1)): [31], (u'', (0, 0.842337, 1, 1)): [9], (u'green', (0, 1, 0, 1)): [20], (u'', (0, 0.737095, 1, 1)): [8], (u'', (1, 0.421368, 0, 1)): [35], (u'', (1, 0.210884, 0, 1)): [37], (u'', (0.947179, 1, 0, 1)): [29],
(u'', (0, 1, 0.420968, 1)): [16], (u'', (0.420968, 1, 0, 1)): [24], (u'', (0, 0.0004, 1, 1)): [1], (u'', (0, 0.526611, 1, 1)): [6], (u'', (0.736695, 1, 0, 1)): [27], (u'', (0, 1, 0.526211, 1)): [15], (u'white', (1, 1, 1, 1)): [41], (u'', (0.841937, 1, 0, 1)): [28], (u'', (0.526211, 1, 0, 1)): [25]})
	viewerInfo = {'cameraAttrs': {'center': (-43.1275, 7.4915, 26.609027544868), 'fieldOfView': 38.32586209521, 'nearFar': (73.662189229739, -20.444134140003), 'ortho': False, 'eyeSeparation': 50.8, 'focal': 26.627499983311}, 'viewerAttrs': {'silhouetteColor': None, 'clipping': False, 'showSilhouette': True, 'showShadows': False, 'viewSize': 41.684798184801, 'labelsOnTop': True, 'depthCueRange': (0.5, 1), 'silhouetteWidth': 3, 'singleLayerTransparency': True, 'shadowTextureSize': 2048, 'backgroundImage': [None, 1, 2, 1, 0, 0], 'backgroundGradient': [('Chimera default', [(1, 1, 1, 1), (0, 0, 1, 1)], 1), 1, 0, 0], 'depthCue': True, 'highlight': 0, 'scaleFactor': 0.54637974213202, 'angleDependentTransparency': True, 'backgroundMethod': 0}, 'viewerHL': 20, 'cameraMode': 'mono', 'detail': 1.5, 'viewerFog': None, 'viewerBG': 41}

	replyobj.status("Initializing session restore...", blankAfter=0,
		secondary=True)
	from SimpleSession.versions.v64 import expandSummary
	init(dict(enumerate(expandSummary(colorInfo))))
	replyobj.status("Restoring colors...", blankAfter=0,
		secondary=True)
	restoreColors(colors, materials)
	replyobj.status("Restoring molecules...", blankAfter=0,
		secondary=True)
	restoreMolecules(molInfo, resInfo, atomInfo, bondInfo, crdInfo)
	replyobj.status("Restoring surfaces...", blankAfter=0,
		secondary=True)
	restoreSurfaces(surfInfo)
	replyobj.status("Restoring VRML models...", blankAfter=0,
		secondary=True)
	restoreVRML(vrmlInfo)
	replyobj.status("Restoring pseudobond groups...", blankAfter=0,
		secondary=True)
	restorePseudoBondGroups(pbInfo)
	replyobj.status("Restoring model associations...", blankAfter=0,
		secondary=True)
	restoreModelAssociations(modelAssociations)
	replyobj.status("Restoring camera...", blankAfter=0,
		secondary=True)
	restoreViewer(viewerInfo)

try:
	restoreCoreModels()
except:
	reportRestoreError("Error restoring core models")

	replyobj.status("Restoring extension info...", blankAfter=0,
		secondary=True)


try:
	import StructMeasure
	from StructMeasure.DistMonitor import restoreDistances
	registerAfterModelsCB(restoreDistances, 1)
except:
	reportRestoreError("Error restoring distances in session")


def restoreMidasBase():
	formattedPositions = {'session-start': (0.54637974213202, 41.684798184801, (-43.1275, 7.4915, 26.609027544868), (73.662189229739, -20.444134140003), 26.627499983311, {(0, 0): ((7.2631704101245, -1.3759885302185, 24.206502381721), (-0.36735988174789186, -0.9282630049472546, 0.05809054078305929, 29.230320054902997))}, {(0, 0, 'MSMSModel'): (False, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, False, 5.0), (0, 0, 'Molecule'): (False, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, False, 5.0)}, 4, (-43.13375353209757, 7.47770329989579, 26.609027544867853), False, 38.32586209521)}
	import Midas
	Midas.restoreMidasBase(formattedPositions)
try:
	restoreMidasBase()
except:
	reportRestoreError('Error restoring Midas base state')


def restoreMidasText():
	from Midas import midas_text
	midas_text.aliases = {}
	midas_text.userSurfCategories = {}

try:
	restoreMidasText()
except:
	reportRestoreError('Error restoring Midas text state')


def restore_cap_attributes():
 cap_attributes = \
  {
   'cap_attributes': [
     {
      'cap_color': None,
      'class': 'Model_Capper_State',
      'display_style': None,
      'surface': ( 0, 0, ),
      'version': 1,
     },
    ],
   'cap_color': None,
   'cap_offset': 0.01,
   'class': 'Caps_State',
   'default_cap_offset': 0.01,
   'mesh_style': False,
   'shown': True,
   'subdivision_factor': 1.0,
   'version': 1,
  }
 import SurfaceCap.session
 SurfaceCap.session.restore_cap_attributes(cap_attributes)
registerAfterModelsCB(restore_cap_attributes)


def restore_volume_data():
 volume_data_state = \
  {
   'class': 'Volume_Manager_State',
   'data_and_regions_state': [ ],
   'version': 2,
  }
 from VolumeViewer import session
 session.restore_volume_data_state(volume_data_state)

try:
  restore_volume_data()
except:
  reportRestoreError('Error restoring volume data')

geomData = {'AxisManager': {}, 'CentroidManager': {}, 'PlaneManager': {}}

try:
	from StructMeasure.Geometry import geomManager
	geomManager._restoreSession(geomData)
except:
	reportRestoreError("Error restoring geometry objects in session")


def restoreSession_RibbonStyleEditor():
	import SimpleSession
	import RibbonStyleEditor
	userScalings = []
	userXSections = []
	userResidueClasses = []
	residueData = [(1, 'Chimera default', 'rounded', u'amino acid'), (2, 'Chimera default', 'rounded', u'amino acid'), (3, 'Chimera default', 'rounded', u'amino acid'), (4, 'Chimera default', 'rounded', u'amino acid'), (5, 'Chimera default', 'rounded', u'amino acid'), (6, 'Chimera default', 'rounded', u'amino acid'), (7, 'Chimera default', 'rounded', u'amino acid'), (8, 'Chimera default', 'rounded', u'amino acid'), (9, 'Chimera default', 'rounded', u'amino acid'), (10, 'Chimera default', 'rounded', u'amino acid'), (11, 'Chimera default', 'rounded', u'amino acid'), (12, 'Chimera default', 'rounded', u'amino acid'), (13, 'Chimera default', 'rounded', u'amino acid'), (14, 'Chimera default', 'rounded', u'amino acid'), (15, 'Chimera default', 'rounded', u'amino acid'), (16, 'Chimera default', 'rounded', u'amino acid'), (17, 'Chimera default', 'rounded', u'amino acid'), (18, 'Chimera default', 'rounded', u'amino acid'), (19, 'Chimera default', 'rounded', u'amino acid'), (20, 'Chimera default', 'rounded', u'amino acid'), (21, 'Chimera default', 'rounded', u'amino acid'), (22, 'Chimera default', 'rounded', u'amino acid'),
(23, 'Chimera default', 'rounded', u'amino acid'), (24, 'Chimera default', 'rounded', u'amino acid'), (25, 'Chimera default', 'rounded', u'amino acid'), (26, 'Chimera default', 'rounded', u'amino acid'), (27, 'Chimera default', 'rounded', u'amino acid'), (28, 'Chimera default', 'rounded', u'amino acid'), (29, 'Chimera default', 'rounded', u'amino acid'), (30, 'Chimera default', 'rounded', u'amino acid'), (31, 'Chimera default', 'rounded', u'amino acid'), (32, 'Chimera default', 'rounded', u'amino acid'), (33, 'Chimera default', 'rounded', u'amino acid'), (34, 'Chimera default', 'rounded', u'amino acid'), (35, 'Chimera default', 'rounded', u'amino acid'), (36, 'Chimera default', 'rounded', u'amino acid'), (37, 'Chimera default', 'rounded', u'amino acid'), (38, 'Chimera default', 'rounded', u'amino acid'), (39, 'Chimera default', 'rounded', u'amino acid')]
	flags = RibbonStyleEditor.NucleicDefault1
	SimpleSession.registerAfterModelsCB(RibbonStyleEditor.restoreState,
				(userScalings, userXSections,
				userResidueClasses, residueData, flags))
try:
	restoreSession_RibbonStyleEditor()
except:
	reportRestoreError("Error restoring RibbonStyleEditor state")

trPickle = 'gAJjQW5pbWF0ZS5UcmFuc2l0aW9ucwpUcmFuc2l0aW9ucwpxASmBcQJ9cQMoVQxjdXN0b21fc2NlbmVxBGNBbmltYXRlLlRyYW5zaXRpb24KVHJhbnNpdGlvbgpxBSmBcQZ9cQcoVQZmcmFtZXNxCEsBVQ1kaXNjcmV0ZUZyYW1lcQlLAVUKcHJvcGVydGllc3EKXXELVQNhbGxxDGFVBG5hbWVxDVUMY3VzdG9tX3NjZW5lcQ5VBG1vZGVxD1UGbGluZWFycRB1YlUIa2V5ZnJhbWVxEWgFKYFxEn1xEyhoCEsUaAlLAWgKXXEUaAxhaA1VCGtleWZyYW1lcRVoD2gQdWJVBXNjZW5lcRZoBSmBcRd9cRgoaAhLAWgJSwFoCl1xGWgMYWgNVQVzY2VuZXEaaA9oEHVidWIu'
scPickle = 'gAJjQW5pbWF0ZS5TY2VuZXMKU2NlbmVzCnEBKYFxAn1xA1UHbWFwX2lkc3EEfXNiLg=='
kfPickle = 'gAJjQW5pbWF0ZS5LZXlmcmFtZXMKS2V5ZnJhbWVzCnEBKYFxAn1xA1UHZW50cmllc3EEXXEFc2Iu'
def restoreAnimation():
	'A method to unpickle and restore animation objects'
	# Scenes must be unpickled after restoring transitions, because each
	# scene links to a 'scene' transition. Likewise, keyframes must be 
	# unpickled after restoring scenes, because each keyframe links to a scene.
	# The unpickle process is left to the restore* functions, it's 
	# important that it doesn't happen prior to calling those functions.
	import SimpleSession
	from Animate.Session import restoreTransitions
	from Animate.Session import restoreScenes
	from Animate.Session import restoreKeyframes
	SimpleSession.registerAfterModelsCB(restoreTransitions, trPickle)
	SimpleSession.registerAfterModelsCB(restoreScenes, scPickle)
	SimpleSession.registerAfterModelsCB(restoreKeyframes, kfPickle)
try:
	restoreAnimation()
except:
	reportRestoreError('Error in Animate.Session')

def restoreLightController():
	import Lighting
	Lighting._setFromParams({'ratio': 1.25, 'brightness': 1.16, 'material': [30.0, (0.85, 0.85, 0.85), 1.0], 'back': [(0.3574067443365933, 0.6604015517481455, -0.6604015517481456), (1.0, 1.0, 1.0), 0.0], 'mode': 'ambient', 'key': [(-0.3574067443365933, 0.6604015517481455, 0.6604015517481456), (1.0, 1.0, 1.0), 1.0], 'contrast': 0.83, 'fill': [(0.2505628070857316, 0.2505628070857316, 0.9351131265310294), (1.0, 1.0, 1.0), 0.0]})
try:
	restoreLightController()
except:
	reportRestoreError("Error restoring lighting parameters")


def restoreRemainder():
	from SimpleSession.versions.v64 import restoreWindowSize, \
	     restoreOpenStates, restoreSelections, restoreFontInfo, \
	     restoreOpenModelsAttrs, restoreModelClip, restoreSilhouettes

	curSelIds =  []
	savedSels = []
	openModelsAttrs = { 'cofrMethod': 4 }
	windowSize = (1345, 618)
	xformMap = {0: (((-0.36735988174789, -0.92826300494725, 0.058090540783059), 29.230320054903), (7.2631704101245, -1.3759885302185, 24.206502381721), True)}
	fontInfo = {'face': ('Sans Serif', 'Normal', 16)}
	clipPlaneInfo = {}
	silhouettes = {0: True, 582: True, 583: True}

	replyobj.status("Restoring window...", blankAfter=0,
		secondary=True)
	restoreWindowSize(windowSize)
	replyobj.status("Restoring open states...", blankAfter=0,
		secondary=True)
	restoreOpenStates(xformMap)
	replyobj.status("Restoring font info...", blankAfter=0,
		secondary=True)
	restoreFontInfo(fontInfo)
	replyobj.status("Restoring selections...", blankAfter=0,
		secondary=True)
	restoreSelections(curSelIds, savedSels)
	replyobj.status("Restoring openModel attributes...", blankAfter=0,
		secondary=True)
	restoreOpenModelsAttrs(openModelsAttrs)
	replyobj.status("Restoring model clipping...", blankAfter=0,
		secondary=True)
	restoreModelClip(clipPlaneInfo)
	replyobj.status("Restoring per-model silhouettes...", blankAfter=0,
		secondary=True)
	restoreSilhouettes(silhouettes)

	replyobj.status("Restoring remaining extension info...", blankAfter=0,
		secondary=True)
try:
	restoreRemainder()
except:
	reportRestoreError("Error restoring post-model state")
from SimpleSession.versions.v64 import makeAfterModelsCBs
makeAfterModelsCBs()

from SimpleSession.versions.v64 import endRestore
replyobj.status('Finishing restore...', blankAfter=0, secondary=True)
endRestore({})
replyobj.status('', secondary=True)
replyobj.status('Restore finished.')

